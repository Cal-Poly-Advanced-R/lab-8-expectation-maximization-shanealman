probs1 = 1
while(sum((probs2 - probs1)^2) > 0.00001){
probs1 = probs2
probs2 = NULL
if(ncol(x) > 1){
for(i in 1:k){
initprob = dmvnorm(x, as.numeric(means[i,]), cov.var[[i]])
probs2 = cbind(probs2, initprob)}
} else {
for(i in 1:k){
initprob = dnorm(x, means[i], cov.var[[i]])
probs2 = cbind(probs2, initprob)
}
}
totalpost = 0
for(i in 1:k){
tempP = priors[i]*probs2[,i]
totalpost = totalpost + tempP}
posts = NULL
for(i in 1:k){
initpost = (priors[i]*probs2[,i])/totalpost
posts = cbind(posts, initpost)}
priors = apply(posts, 2, mean)
means = NULL
if(ncol(x) > 1){
for(i in 1:k){
tempM = colSums(posts[,i]*x)/sum(posts[,i])
means = rbind(means, tempM)}
} else {
for(i in 1:k){
tempM = sum(posts[,i]*x)/sum(posts[,i])
means = c(means, tempM)
}
}
lambda = NULL
for(i in 1:k){
templambda = posts[,i]/(length(posts[,i])*priors[i])
lambda = cbind(lambda, templambda)}
cov.var = vector('list', length = k)
if(ncol(x) > 1){
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i,]) %*% t(x[l,] - means[i,]))
tempcov.var = tempcov.var + initcov.var}
cov.var[[i]] = tempcov.var}
} else {
cov.var = vector('list', length = k)
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i]) %*% t(x[l,] - means[i]))
tempcov.var =tempcov.var + initcov.var}
cov.var[[i]] = sqrt(tempcov.var)
}
}
}
clust = rep(NA, nrow(posts))
for(i in 1:nrow(posts)){clust[i] = which(posts[i,] == max(posts[i,]), arr.ind = T)}
cov.var = unlist(cov.var)
cov.var = matrix(cov.var, ncol = k, byrow = T)
return(list('Clusters' = clust, 'Means' = means, 'Covariance' = cov.var))
}
em_clust(x, 2)
b = em_clust(x, 2)
b$Means
unlist(b$Means)
rownames(b$Means) = NULL
b
em_clust = function(x, k){
priors = rep(1/k, k)
x = as.matrix(x)
if(ncol(x) > 1){
x = data.frame(x)
means = sample_n(x, k)
}else {
means = sample(x, k)}
x = as.matrix(x)
cov.var = vector('list', length = k)
for(i in 1:k){
if(
ncol(x) > 1){cov.var[[i]] = cov(x)
}else {
cov.var[[i]] = sd(x)}
}
probs2 = 0
probs1 = 1
while(sum((probs2 - probs1)^2) > 0.00001){
probs1 = probs2
probs2 = NULL
if(ncol(x) > 1){
for(i in 1:k){
initprob = dmvnorm(x, as.numeric(means[i,]), cov.var[[i]])
probs2 = cbind(probs2, initprob)}
} else {
for(i in 1:k){
initprob = dnorm(x, means[i], cov.var[[i]])
probs2 = cbind(probs2, initprob)
}
}
totalpost = 0
for(i in 1:k){
tempP = priors[i]*probs2[,i]
totalpost = totalpost + tempP}
posts = NULL
for(i in 1:k){
initpost = (priors[i]*probs2[,i])/totalpost
posts = cbind(posts, initpost)}
priors = apply(posts, 2, mean)
means = NULL
if(ncol(x) > 1){
for(i in 1:k){
tempM = colSums(posts[,i]*x)/sum(posts[,i])
means = rbind(means, tempM)}
} else {
for(i in 1:k){
tempM = sum(posts[,i]*x)/sum(posts[,i])
means = c(means, tempM)
}
}
lambda = NULL
for(i in 1:k){
templambda = posts[,i]/(length(posts[,i])*priors[i])
lambda = cbind(lambda, templambda)}
cov.var = vector('list', length = k)
if(ncol(x) > 1){
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i,]) %*% t(x[l,] - means[i,]))
tempcov.var = tempcov.var + initcov.var}
cov.var[[i]] = tempcov.var}
} else {
cov.var = vector('list', length = k)
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i]) %*% t(x[l,] - means[i]))
tempcov.var =tempcov.var + initcov.var}
cov.var[[i]] = sqrt(tempcov.var)
}
}
}
clust = rep(NA, nrow(posts))
for(i in 1:nrow(posts)){clust[i] = which(posts[i,] == max(posts[i,]), arr.ind = T)}
cov.var = unlist(cov.var)
cov.var = matrix(cov.var, ncol = k, byrow = T)
rownames(means) = NULL
return(list('Clusters' = clust, 'Means' = means, 'Covariance' = cov.var))
}
b = em_clust(x, 2)
b
b = em_clust(x, 3)
b
em_clust = function(x, k){
priors = rep(1/k, k)
x = as.matrix(x)
if(ncol(x) > 1){
x = data.frame(x)
means = sample_n(x, k)
}else {
means = sample(x, k)}
x = as.matrix(x)
cov.var = vector('list', length = k)
for(i in 1:k){
if(
ncol(x) > 1){cov.var[[i]] = cov(x)
}else {
cov.var[[i]] = sd(x)}
}
probs2 = 0
probs1 = 1
while(sum((probs2 - probs1)^2) > 0.00001){
probs1 = probs2
probs2 = NULL
if(ncol(x) > 1){
for(i in 1:k){
initprob = dmvnorm(x, as.numeric(means[i,]), cov.var[[i]])
probs2 = cbind(probs2, initprob)}
} else {
for(i in 1:k){
initprob = dnorm(x, means[i], cov.var[[i]])
probs2 = cbind(probs2, initprob)
}
}
totalpost = 0
for(i in 1:k){
tempP = priors[i]*probs2[,i]
totalpost = totalpost + tempP}
posts = NULL
for(i in 1:k){
initpost = (priors[i]*probs2[,i])/totalpost
posts = cbind(posts, initpost)}
priors = apply(posts, 2, mean)
means = NULL
if(ncol(x) > 1){
for(i in 1:k){
tempM = colSums(posts[,i]*x)/sum(posts[,i])
means = rbind(means, tempM)}
} else {
for(i in 1:k){
tempM = sum(posts[,i]*x)/sum(posts[,i])
means = c(means, tempM)
}
}
lambda = NULL
for(i in 1:k){
templambda = posts[,i]/(length(posts[,i])*priors[i])
lambda = cbind(lambda, templambda)}
cov.var = vector('list', length = k)
if(ncol(x) > 1){
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i,]) %*% t(x[l,] - means[i,]))
tempcov.var = tempcov.var + initcov.var}
cov.var[[i]] = tempcov.var}
} else {
cov.var = vector('list', length = k)
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i]) %*% t(x[l,] - means[i]))
tempcov.var =tempcov.var + initcov.var}
cov.var[[i]] = sqrt(tempcov.var)
}
}
}
clust = rep(NA, nrow(posts))
for(i in 1:nrow(posts)){clust[i] = which(posts[i,] == max(posts[i,]), arr.ind = T)}
rownames(means) = NULL
return(list('Clusters' = clust, 'Means' = means, 'Covariance' = cov.var))
}
b = em_clust(x, 3)
b
b = em_clust(x, 5)
b
em_clust = function(x, k){
priors = rep(1/k, k)
x = as.matrix(x)
if(ncol(x) > 1){
x = data.frame(x)
means = sample_n(x, k)
}else {
means = sample(x, k)}
x = as.matrix(x)
cov.var = vector('list', length = k)
for(i in 1:k){
if(
ncol(x) > 1){cov.var[[i]] = cov(x)
}else {
cov.var[[i]] = sd(x)}
}
probs2 = 0
probs1 = 1
while(sum((probs2 - probs1)^2) > 0.00001){
probs1 = probs2
probs2 = NULL
if(ncol(x) > 1){
for(i in 1:k){
initprob = dmvnorm(x, as.numeric(means[i,]), cov.var[[i]])
probs2 = cbind(probs2, initprob)}
} else {
for(i in 1:k){
initprob = dnorm(x, means[i], cov.var[[i]])
probs2 = cbind(probs2, initprob)
}
}
totalpost = 0
for(i in 1:k){
tempP = priors[i]*probs2[,i]
totalpost = totalpost + tempP}
posts = NULL
for(i in 1:k){
initpost = (priors[i]*probs2[,i])/totalpost
posts = cbind(posts, initpost)}
priors = apply(posts, 2, mean)
means = NULL
if(ncol(x) > 1){
for(i in 1:k){
tempM = colSums(posts[,i]*x)/sum(posts[,i])
means = rbind(means, tempM)}
} else {
for(i in 1:k){
tempM = sum(posts[,i]*x)/sum(posts[,i])
means = c(means, tempM)
}
}
lambda = NULL
for(i in 1:k){
templambda = posts[,i]/(length(posts[,i])*priors[i])
lambda = cbind(lambda, templambda)}
cov.var = vector('list', length = k)
if(ncol(x) > 1){
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i,]) %*% t(x[l,] - means[i,]))
tempcov.var = tempcov.var + initcov.var}
cov.var[[i]] = tempcov.var}
} else {
cov.var = vector('list', length = k)
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i]) %*% t(x[l,] - means[i]))
tempcov.var =tempcov.var + initcov.var}
cov.var[[i]] = sqrt(tempcov.var)
}
}
}
clust = rep(NA, nrow(posts))
for(i in 1:nrow(posts)){clust[i] = which(posts[i,] == max(posts[i,]), arr.ind = T)}
rownames(means) = NULL
return(list('Clusters' = clust, 'Means' = means, 'Covariance' = cov.var))
}
em_clust(mtcars, 4)
df1 = select(iris, Petal.Length, Petal.Width)
df1 = select(iris, Petal.Length, Petal.Width)
df1 = select(iris, Petal.Length, Petal.Width)
library(tidyverse)
df1 = select(iris, Petal.Length, Petal.Width)
df1 = select(iris, Petal.Length, Petal.Width)
select(iris, Petal.Length, Petal.Width)
dplyr::select(iris, Petal.Length, Petal.Width)
df1 = dplyr::select(iris, Petal.Length, Petal.Width)
df1
plot(df1)
em_clust(df1, 3)
warnings()
em_clust(df1, 2)
em_clust(df1, 3)
em_clust(df1, 3)
em_clust(df1, 3)
em_clust(df1, 3)
em_clust(df1, 3)
em_clust(df1, 3)
b = em_clust(df1, 3)
b$Clusters
kmeans(df1, 3)
em_clust = function(x, k){
priors = rep(1/k, k)
x = as.matrix(x)
if(ncol(x) > 1){
x = data.frame(x)
means = sample_n(x, k)
}else {
means = sample(x, k)}
x = as.matrix(x)
cov.var = vector('list', length = k)
for(i in 1:k){
if(
ncol(x) > 1){cov.var[[i]] = cov(x)
}else {
cov.var[[i]] = sd(x)}
}
probs2 = 0
probs1 = 1
while(sum((probs2 - probs1)^2) > 0.00001){
probs1 = probs2
probs2 = NULL
if(ncol(x) > 1){
for(i in 1:k){
initprob = dmvnorm(x, as.numeric(means[i,]), cov.var[[i]])
probs2 = cbind(probs2, initprob)}
} else {
for(i in 1:k){
initprob = dnorm(x, means[i], cov.var[[i]])
probs2 = cbind(probs2, initprob)
}
}
totalpost = 0
for(i in 1:k){
tempP = priors[i]*probs2[,i]
totalpost = totalpost + tempP}
posts = NULL
for(i in 1:k){
initpost = (priors[i]*probs2[,i])/totalpost
posts = cbind(posts, initpost)}
priors = apply(posts, 2, mean)
means = NULL
if(ncol(x) > 1){
for(i in 1:k){
tempM = colSums(posts[,i]*x)/sum(posts[,i])
means = rbind(means, tempM)}
} else {
for(i in 1:k){
tempM = sum(posts[,i]*x)/sum(posts[,i])
means = c(means, tempM)
}
}
lambda = NULL
for(i in 1:k){
templambda = posts[,i]/(length(posts[,i])*priors[i])
lambda = cbind(lambda, templambda)}
cov.var = vector('list', length = k)
if(ncol(x) > 1){
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i,]) %*% t(x[l,] - means[i,]))
tempcov.var = tempcov.var + initcov.var}
cov.var[[i]] = tempcov.var}
} else {
cov.var = vector('list', length = k)
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i]) %*% t(x[l,] - means[i]))
tempcov.var =tempcov.var + initcov.var}
cov.var[[i]] = sqrt(tempcov.var)
}
}
}
clust = rep(NA, nrow(posts))
for(i in 1:nrow(posts)){clust[i] = which(posts[i,] == max(posts[i,]), arr.ind = T)}
rownames(means) = NULL
return(list('Clusters' = clust, 'Means' = means, 'Covariance' = cov.var))
}
library(tidyverse)
library(mvtnorm)
em_clust
df1 = select(iris, Petal.Length, Petal.Width)
em_clust(df1, 4)
em_clust(df1, 3)
em_clust(df1, 3)
a = em_clust(df1, 3)
kmeans(df1, 4)
kmeans(df1, 3)
a$Means
a
em_clust = function(x, k){
priors = rep(1/k, k)
x = as.matrix(x)
if(ncol(x) > 1){
x = data.frame(x)
means = sample_n(x, k)
}else {
means = sample(x, k)}
x = as.matrix(x)
cov.var = vector('list', length = k)
for(i in 1:k){
if(
ncol(x) > 1){cov.var[[i]] = cov(x)
}else {
cov.var[[i]] = sd(x)}
}
probs2 = 0
probs1 = 1
while(sum((probs2 - probs1)^2) > 0.00001){
probs1 = probs2
probs2 = NULL
if(ncol(x) > 1){
for(i in 1:k){
initprob = dmvnorm(x, as.numeric(means[i,]), cov.var[[i]])
probs2 = cbind(probs2, initprob)}
} else {
for(i in 1:k){
initprob = dnorm(x, means[i], cov.var[[i]])
probs2 = cbind(probs2, initprob)
}
}
totalpost = 0
for(i in 1:k){
tempP = priors[i]*probs2[,i]
totalpost = totalpost + tempP}
posts = NULL
for(i in 1:k){
initpost = (priors[i]*probs2[,i])/totalpost
posts = cbind(posts, initpost)}
priors = apply(posts, 2, mean)
means = NULL
if(ncol(x) > 1){
for(i in 1:k){
tempM = colSums(posts[,i]*x)/sum(posts[,i])
means = rbind(means, tempM)}
} else {
for(i in 1:k){
tempM = sum(posts[,i]*x)/sum(posts[,i])
means = c(means, tempM)
}
}
lambda = NULL
for(i in 1:k){
templambda = posts[,i]/(length(posts[,i])*priors[i])
lambda = cbind(lambda, templambda)}
cov.var = vector('list', length = k)
if(ncol(x) > 1){
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i,]) %*% t(x[l,] - means[i,]))
tempcov.var = tempcov.var + initcov.var}
cov.var[[i]] = tempcov.var}
} else {
cov.var = vector('list', length = k)
for(i in 1:k){
tempcov.var = 0
for(l in 1:nrow(posts)){
initcov.var = lambda[l,i] * ((x[l,] - means[i]) %*% t(x[l,] - means[i]))
tempcov.var =tempcov.var + initcov.var}
cov.var[[i]] = sqrt(tempcov.var)
}
}
}
clust = rep(NA, nrow(posts))
for(i in 1:nrow(posts)){clust[i] = which(posts[i,] == max(posts[i,]), arr.ind = T)}
rownames(means) = NULL
return(list('Clusters' = clust, 'Means' = means, 'Covariance' = cov.var))
}
mtcars
library(MASS)
